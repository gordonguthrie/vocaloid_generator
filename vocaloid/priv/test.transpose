% this is an Erlang comment
%
% This file is evaluated as an Erlang form
% and therefore has to end with a full stop
% (Erlang has a Prolog-y syntax not an Algol-y one)
%
% transpositions are by semitone/midi number
% if you wish to not include a not, use an atom
% (by convention 'r' for rest)
%
% if your notes are not integers then the script will just crash
% no validation is done on the input
%
% the format is a list of lists of lists
% (this is to make it easier to rationalise about what chords
%  you are generating)
%
% * the top level is a list of transforms
%    (eg if the top level list has five elements it will take
%    a single Vocaloid track and generate an additional
%    5 tracks from it)
% * the second level list is a list of parts
% * the third level list is a list of notes
%
% the transformer will be guided by the structure of the
% vocaloid file
%
% if you pass a 6 note transform to a 5 note part it will
% transform 5 notes and tell you about the dropped 6th
%
% if you pass a 4 note transform to a 5 note part it will
% transform 4 notes and tell you about the untouched 5th
%
% ditto with parts
%
% This transform is for testing against the Vocaloid file
% 13_notes.vpr
%
% 13_notes.vpr has:
% * a single track with
% * a single part with
% * 13 notes
%
% these use cases cover:
% * too many   parts
% * goldilocks parts
% * too few    parts
% * too many   notes
% * goldilocks notes
% * too few    notes
[
	[[r, r, 4,-8, 5],[1, 0]],
	[[0, 0, 4,-3, 5]],
	[],
	[[0, 3, 4,-5, 5, 0, 0, 0, 0, r, r, 0, 0, 0, 0, 1]],
	[[0, 3, 4,-5, 5, 0, 0, 0, 0, 0, 0, 0, 1]],
	[[0, 0, 4,-3, 8]]
].